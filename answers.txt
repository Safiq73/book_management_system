Question 1:
Explain how FastAPI handles asynchronous requests and its benefits over synchronous code in Python?
=> FastAPI uses asynchronous handling with Python's asyncio library to process multiple requests simultaneously, so that while one thread waits other thread will run. making it faster and more efficient than synchronous code. Benefits include improved performance, scalability, resource efficiency, better user experience, and simplified code.


- Question 2: Describe how dependency injection works in FastAPI and give an
example of its practical use.
In FastAPI, dependency injection works by allowing you to define dependencies (like database connections or authentication logic) separately and then inject them into your route functions.
Every handler which is having dependency, will execute the dependency first once dependency execution is successful it will proceed for definition of that handler.

ex:
# Dependency function to get a database session
async def get_db():
    async with engine.begin() as conn:
        await conn.run_sync(
            Base.metadata.create_all
        )  # Create database tables if they don't exist
    db = SessionLocal()  # Get a database session
    try:
        yield db  # Yield the database session to the dependent function
    finally:
        await db.close()  # Close the database session after the dependent function finishes


@app.post(
    "/book/",
    name=rte.ADD_BOOK_RTE,
    status_code=201
)
async def create_book(book: schemas.CreateBook, db: AsyncSession = Depends(get_db)):
    """Handler for creating a new book record"""
    return await BookService.add_book(db, book)


code walkthrough
The main file contains all the necessary routes for the application, along with dependency logic for obtaining the database session. Dependency injection is utilized to invoke this logic. 
Each handler within the main file corresponds to a service function, located in app/services/book.py, which houses all the business logic. 
These service functions, in turn, call functions from the repository file, situated at app/repositories/book.py, where all database calls are centralized. 
Database connection logic resides in app/db/connect.py, while database models are defined in app/models/book.py.